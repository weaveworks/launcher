version: 2.1

notify:
  webhooks:
    # Zap to forward healthcheck failures to Slack
    - url: https://hooks.zapier.com/hooks/catch/2669140/zma7dg/
    - url: https://hooks.zapier.com/hooks/catch/2669140/ziw81i/


# Environment for build & unit testing
defaults: &defaults
  working_directory: /go/src/github.com/weaveworks/launcher
  docker:
    # 1.10.0 and dnsName: https://github.com/golang/go/issues/23995
    - image: circleci/golang:1.16

# Environment for integration testing
integration_test_defaults: &integration_test_defaults
  machine:
    image: ubuntu-2004:202107-02
  parameters:
    k8s_version:
      type: string

# All kubernetes versions we want to be testing against
run_for_k8s_versions: &run_for_k8s_versions
  matrix:
    parameters:
      k8s_version: ['v1.12.10', 'v1.14.10', 'latest']

# Integration tests should all depend on all main build jobs
workflow_job_defaults: &workflow_job_defaults
  requires:
    - agent
    - bootstrap
    - service

commands:
  start_integration_env:
    parameters:
      k8s_version:
        type: string
    steps:
      - checkout
      - run:
          name: Install tools
          command: |
            KUBERNETES_VERSION=<< parameters.k8s_version >>
            KIND_VERSION=v0.11.1
            if [[ $KUBERNETES_VERSION == v1.12* ]]; then
              KIND_VERSION=v0.8.1
            fi
            curl --retry 5 -Lo yq https://github.com/mikefarah/yq/releases/download/v4.12.2/yq_linux_amd64 && chmod +x yq && sudo mv yq /usr/local/bin/
            curl --retry 5 -Lo kind https://github.com/kubernetes-sigs/kind/releases/download/${KIND_VERSION}/kind-linux-amd64 && chmod +x kind && sudo mv kind /usr/local/bin/
            if [ $KUBERNETES_VERSION == "latest" ]; then
              KUBERNETES_VERSION=$(curl -s https://registry.hub.docker.com/v1/repositories/kindest/node/tags | jq -r '.[].name' | sort -n | tail -n 1)
            fi
            curl --retry 5 -Lo kubectl "https://storage.googleapis.com/kubernetes-release/release/${KUBERNETES_VERSION}/bin/linux/amd64/kubectl" && chmod +x kubectl && sudo mv kubectl /usr/local/bin/
            echo "export KUBERNETES_VERSION='$KUBERNETES_VERSION'" >> $BASH_ENV
      - run:
          name: Create cluster
          command: |
            kind create cluster --name=launcher-tests --image=kindest/node:${KUBERNETES_VERSION}
            if [ -z "${CIRCLE_TAG}" -a "${CIRCLE_BRANCH}" == "main" ]; then
              echo 'export SERVICE_IMAGE="weaveworks/launcher-service:'$(docker/image-tag)'"' >> $BASH_ENV
            else
              echo 'export SERVICE_IMAGE="weaveworks/build-tmp-public:launcher-service-'$(docker/image-tag)'"' >> $BASH_ENV
            fi
            source $BASH_ENV
            docker pull $SERVICE_IMAGE
            kind load docker-image --name=launcher-tests $SERVICE_IMAGE
      - run:
          name: Wait for nodes & DNS to be ready
          command: |
            JSONPATH='{range .items[*]}{@.metadata.name}:{range @.status.conditions[*]}{@.type}={@.status};{end}{end}'
            until kubectl get nodes -o jsonpath="$JSONPATH" --request-timeout=1s | grep -q "Ready=True"; do
              sleep 1
              echo "wait for node to be available"
              kubectl get nodes
            done
            JSONPATH='{range .items[*]}{@.metadata.name}:{range @.status.conditions[*]}{@.type}={@.status};{end}{end}'
            until kubectl -n kube-system get pods -lk8s-app=kube-dns -o jsonpath="$JSONPATH" --request-timeout=1s | grep -q "Ready=True"; do
              sleep 1
              echo "waiting for kube-dns to be available"
              kubectl get pods -n kube-system
            done

  grab_logs:
    steps:
      - run:
          name: Output state of the k8s cluster on failed test
          command: |
            kubectl get all --all-namespaces
            kubectl get events --all-namespaces --field-selector=type=Warning
            kubectl logs -n weave -l=launcher=dns
          when: on_fail
      - run:
          name: Export k8s cluster logs
          command: kind export logs --name=launcher-tests cluster_logs
          when: on_fail
      - store_artifacts:
          path: ./cluster_logs

jobs:
  global_tests:
    <<: *defaults
    steps:
      - checkout
      - run: make lint
      - run: make dep
      - run: go test ./pkg/...

  bootstrap:
    <<: *defaults
    steps:
      - checkout
      - setup_remote_docker
      - run: make dep
      - run: go test ./bootstrap
      - run: make bootstrap
      - deploy:
          name: Push binaries to S3
          command: |
            sudo apt-get update
            sudo apt-get -y -qq install awscli
            aws s3 cp build/bootstrap/ s3://weaveworks-launcher/bootstrap/${CIRCLE_SHA1}/ --recursive

  service:
    <<: *defaults
    steps:
      - checkout
      - setup_remote_docker
      - run: make dep
      - run: make service/static/agent.yaml
      - run: go test ./service
      - run: make service
      - deploy:
          name: Push image
          command: |
            sudo apt-get update -qq
            sudo apt-get -y -qq install python3-pip
            sudo pip install awscli # The apt package doesn't support --no-include-email
            mkdir ~/.aws
            echo $AWS_ECR_CREDENTIALS | base64 -d > ~/.aws/credentials
            $(unset AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY && aws ecr get-login --no-include-email --region us-east-1)
            docker login -u "$DOCKER_REGISTRY_USER" -p "$DOCKER_REGISTRY_PASSWORD"
            if [ -z "${CIRCLE_TAG}" -a "${CIRCLE_BRANCH}" == "main" ]; then
              docker push "weaveworks/launcher-service:$(docker/image-tag)"
              docker push "weaveworks/launcher-service"
              docker tag "weaveworks/launcher-service:$(docker/image-tag)" "664268111851.dkr.ecr.us-east-1.amazonaws.com/launcher-service:$(docker/image-tag)"
              docker push "664268111851.dkr.ecr.us-east-1.amazonaws.com/launcher-service:$(docker/image-tag)"
            else
              docker tag "weaveworks/launcher-service:$(docker/image-tag)" "weaveworks/build-tmp-public:launcher-service-$(docker/image-tag)"
              docker push "weaveworks/build-tmp-public:launcher-service-$(docker/image-tag)"
            fi

  agent:
    <<: *defaults
    steps:
      - checkout
      - setup_remote_docker
      - run: make dep
      - run: go test ./agent
      - run: make agent
      - deploy:
          name: Push image
          command: |
            docker login -u "$DOCKER_REGISTRY_USER" -p "$DOCKER_REGISTRY_PASSWORD"
            if [ -z "${CIRCLE_TAG}" -a "${CIRCLE_BRANCH}" == "main" ]; then
              docker push "weaveworks/launcher-agent:$(docker/image-tag)"
              docker push "weaveworks/launcher-agent"
            elif echo "${CIRCLE_TAG}" | grep -Eq "^[0-9]+(\.[0-9]+)*(-[a-z]+)?$"; then
              docker push "weaveworks/launcher-agent:${CIRCLE_TAG}"
            else
              docker tag "weaveworks/launcher-agent:$(docker/image-tag)" "weaveworks/build-tmp-public:launcher-agent-$(docker/image-tag)"
              docker push "weaveworks/build-tmp-public:launcher-agent-$(docker/image-tag)"
            fi

  integration_install_update_flow:
    <<: *integration_test_defaults
    steps:
      - start_integration_env:
          k8s_version: << parameters.k8s_version >>
      - run:
          name: Execute integration tests
          command: ./integration-tests/tests/install-update-flow.sh
      - grab_logs

  integration_cloudwatch:
    <<: *integration_test_defaults
    working_directory: "~/.go_workspace/src/github.com/weaveworks/launcher"
    environment:
      GOPATH: "/home/circleci/.go_workspace"
    steps:
      - start_integration_env:
          k8s_version: << parameters.k8s_version >>
      - run:
          name: Execute integration tests
          command: |
            ./integration-tests/tests/e2e.sh
            make dep
            go test -v ./integration-tests/e2e -args -log.verbose
      - grab_logs

  integration_kube_system_migration:
    <<: *integration_test_defaults
    steps:
      - start_integration_env:
          k8s_version: << parameters.k8s_version >>
      - run:
          name: Execute integration tests
          command: ./integration-tests/tests/kube-system-migration.sh
      - grab_logs

  integration_flux_config:
    <<: *integration_test_defaults
    steps:
      - start_integration_env:
          k8s_version: << parameters.k8s_version >>
      - run:
          name: Execute integration tests
          command: ./integration-tests/tests/flux-config.sh
      - grab_logs

  integration_gke:
    <<: *integration_test_defaults
    steps:
      - run:
          name: Configure gcloud with launcher-integration-tests project
          command: |
            echo $GCLOUD_SERVICE_KEY | base64 --decode --ignore-garbage > ${HOME}/gcloud-service-key.json
            /opt/google/google-cloud-sdk/bin/gcloud --quiet components update
            /opt/google/google-cloud-sdk/bin/gcloud auth activate-service-account --key-file ${HOME}/gcloud-service-key.json
            /opt/google/google-cloud-sdk/bin/gcloud config set project $GCLOUD_PROJECT
      - start_integration_env:
          k8s_version: << parameters.k8s_version >>
      - run:
          name: Execute integration tests
          command: |
            ./integration-tests/tests/gke.sh
      - grab_logs

  integration_healthcheck:
    <<: *integration_test_defaults
    parameters:
      k8s_version:
        type: string
      domain:
        type: string
    steps:
      - start_integration_env:
          k8s_version: << parameters.k8s_version >>
      - run:
          name: Execute healthcheck for << parameters.domain >>
          command: |
            if [[ << parameters.domain >> == "get.weave.works" ]]; then
              export WEAVE_CLOUD_TOKEN=$PROD_INSTANCE_TOKEN
            else
              export WEAVE_CLOUD_TOKEN=$DEV_INSTANCE_TOKEN
            fi
            ./integration-tests/tests/healthcheck.sh << parameters.domain >>
      - grab_logs


  sentry:
    <<: *defaults
    steps:
      - checkout
      - run:
          name: Create sentry release
          command: |
            set -e
            CURRENT_COMMIT="$(git rev-parse HEAD)"
            PREV_COMMIT="$(git rev-parse HEAD^)"
            VERSION="$(git describe --always --long --dirty)"
            curl --retry 5 https://sentry.io/api/0/organizations/weaveworks/releases/ \
              --fail \
              -X POST \
              -H "Authorization: Bearer ${SENTRY_API_KEY}" \
              -H 'Content-Type: application/json' \
              -d '
              {
                "version": "'${VERSION}'",
                "refs": [{
                    "repository":"weaveworks/launcher",
                    "commit":"'${CURRENT_COMMIT}'",
                    "previousCommit":"'${PREV_COMMIT}'"
                }],
                "projects":["launcher-bootstrap","launcher-agent"]
            }
            '

workflows:
  build_deploy:
    jobs:
      - global_tests
      - agent:
          filters:
            tags:
              only: /[0-9]+(\.[0-9]+)*(-[a-z]+)?/
      - bootstrap
      - service:
          context:
            - ecr_upload

      - integration_install_update_flow:
          <<: *run_for_k8s_versions
          <<: *workflow_job_defaults

      - integration_cloudwatch:
          <<: *run_for_k8s_versions
          <<: *workflow_job_defaults

      - integration_kube_system_migration:
          <<: *run_for_k8s_versions
          <<: *workflow_job_defaults

      - integration_flux_config:
          <<: *run_for_k8s_versions
          <<: *workflow_job_defaults

      - integration_gke:
          <<: *run_for_k8s_versions
          <<: *workflow_job_defaults

      - sentry:
          filters:
            branches:
              only: main

  healthchecks:
    triggers:
      - schedule:
          cron: "0 * * * *"
          filters:
            branches:
              only:
                - main
    jobs:
      - integration_healthcheck:
          matrix:
            parameters:
              k8s_version: ['v1.12.10', 'v1.14.10', 'latest']
              domain: ['get.dev.weave.works', 'get.weave.works']

  # re-run $stable jobs once a day as a new
  # version of kubernetes might have been released
  stable_kubernetes_still_works:
    triggers:
      - schedule:
          cron: "0 0 * * *"
          filters:
            branches:
              only:
                - main
    jobs:
      - agent:
          filters:
            tags:
              only: /[0-9]+(\.[0-9]+)*(-[a-z]+)?/
      - bootstrap
      - service:
          context:
            - ecr_upload

      - integration_install_update_flow:
          k8s_version: 'latest'

      - integration_cloudwatch:
          k8s_version: 'latest'

      - integration_kube_system_migration:
          k8s_version: 'latest'

      - integration_flux_config:
          k8s_version: 'latest'

      - integration_gke:
          k8s_version: 'latest'
