version: 2.1

notify:
  webhooks:
    # Zap to forward healthcheck failures to Slack
    - url: https://hooks.zapier.com/hooks/catch/2669140/zma7dg/
    - url: https://hooks.zapier.com/hooks/catch/2669140/ziw81i/


# Environment for build & unit testing
defaults: &defaults
  working_directory: /go/src/github.com/weaveworks/launcher
  docker:
    # 1.10.0 and dnsName: https://github.com/golang/go/issues/23995
    - image: circleci/golang:1.9


# E2E tests depend on building all components:
workflow_job_defaults: &workflow_job_defaults

jobs:
  global_tests:
    <<: *defaults
    steps:
      - checkout
      - run: make lint
      - run: make dep
      - run: go test ./pkg/...

  bootstrap:
    <<: *defaults
    steps:
      - checkout
      - setup_remote_docker
      - run: make dep
      - run: go test ./bootstrap
      - run: make bootstrap
      - deploy:
          name: Push binaries to S3
          command: |
            sudo apt-get update
            sudo apt-get -y -qq install awscli
            aws s3 cp build/bootstrap/ s3://weaveworks-launcher/bootstrap/${CIRCLE_SHA1}/ --recursive

  service:
    <<: *defaults
    steps:
      - checkout
      - setup_remote_docker
      - run: make dep
      - run: make service/static/agent.yaml
      - run: go test ./service
      - run: make service
      - deploy:
          name: Push image
          command: |
            sudo apt-get update -qq
            sudo apt-get -y -qq install python-pip
            sudo pip install awscli # The apt package doesn't support --no-include-email
            mkdir ~/.aws
            echo $AWS_ECR_CREDENTIALS | base64 -d > ~/.aws/credentials
            $(unset AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY && aws ecr get-login --no-include-email --region us-east-1)
            docker login -u "$DOCKER_REGISTRY_USER" -p "$DOCKER_REGISTRY_PASSWORD"
            if [ -z "${CIRCLE_TAG}" -a "${CIRCLE_BRANCH}" == "master" ]; then
              docker push "weaveworks/launcher-service:$(docker/image-tag)"
              docker push "weaveworks/launcher-service"
              docker tag "weaveworks/launcher-service:$(docker/image-tag)" "664268111851.dkr.ecr.us-east-1.amazonaws.com/launcher-service:$(docker/image-tag)"
              docker push "664268111851.dkr.ecr.us-east-1.amazonaws.com/launcher-service:$(docker/image-tag)"
            else
              docker tag "weaveworks/launcher-service:$(docker/image-tag)" "weaveworks/build-tmp-public:launcher-service-$(docker/image-tag)"
              docker push "weaveworks/build-tmp-public:launcher-service-$(docker/image-tag)"
            fi

  agent:
    <<: *defaults
    steps:
      - checkout
      - setup_remote_docker
      - run: make dep
      - run: go test ./agent
      - run: make agent
      - deploy:
          name: Push image
          command: |
            docker login -u "$DOCKER_REGISTRY_USER" -p "$DOCKER_REGISTRY_PASSWORD"
            if [ -z "${CIRCLE_TAG}" -a "${CIRCLE_BRANCH}" == "master" ]; then
              docker push "weaveworks/launcher-agent:$(docker/image-tag)"
              docker push "weaveworks/launcher-agent"
            elif echo "${CIRCLE_TAG}" | grep -Eq "^[0-9]+(\.[0-9]+)*(-[a-z]+)?$"; then
              docker push "weaveworks/launcher-agent:${CIRCLE_TAG}"
            else
              docker tag "weaveworks/launcher-agent:$(docker/image-tag)" "weaveworks/build-tmp-public:launcher-agent-$(docker/image-tag)"
              docker push "weaveworks/build-tmp-public:launcher-agent-$(docker/image-tag)"
            fi


  integration_testing:
    docker:
      - image: cimg/base:2021.04
    parameters:
      k8s_version:
        type: string
      command:
        type: steps
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Install tools
          command: |
            KUBECTL_VERSION=$(<< parameters.k8s_version >>)
            curl --retry 5 -Lo kubectl "https://storage.googleapis.com/kubernetes-release/release/${KUBECTL_VERSION}/bin/linux/amd64/kubectl" && chmod +x kubectl && sudo mv kubectl /usr/local/bin/
            curl --retry 5 -Lo yq https://github.com/mikefarah/yq/releases/download/v4.12.2/yq_linux_amd64 && chmod +x yq && sudo mv yq /usr/local/bin/
            curl --retry 5 -Lo kind https://github.com/kubernetes-sigs/kind/releases/download/v0.11.1/kind-linux-amd64 && chmod +x kind && sudo mv kind /usr/local/bin/
      - run:
          name: Create cluster
          command: |
            KUBE_SERVER_VERSION=$(<< parameters.k8s_version >>)
            env
            cat > kind-config.yaml \<<EOF
            apiVersion: kind.x-k8s.io/v1alpha4
            kind: Cluster
            networking:
              apiServerAddress: "0.0.0.0"

            # add to the apiServer certSANs the name of the docker (dind) service in order to be able to reach the cluster through it
            kubeadmConfigPatchesJSON6902:
              - group: kubeadm.k8s.io
                version: v1beta2
                kind: ClusterConfiguration
                patch: |
                  - op: add
                    path: /apiServer/certSANs/-
                    value: docker
            nodes:
              - role: control-plane
            EOF
            kind create cluster --image=kindest/node:${KUBE_SERVER_VERSION} --config=kind-config.yaml
            sed -i -E -e 's/localhost|0\.0\.0\.0/docker/g' "$HOME/.kube/config"
      - run:
          name: Wait for nodes & DNS to be ready
          command: |
            kind get kubeconfig
            kubectl config get-contexts
            kubectl cluster-info --context kind-kind
            JSONPATH='{range .items[*]}{@.metadata.name}:{range @.status.conditions[*]}{@.type}={@.status};{end}{end}'
            until kubectl get nodes -o jsonpath="$JSONPATH" 2>&1 | grep -q "Ready=True"; do
            kubectl get nodes
            sleep 1
            done
            JSONPATH='{range .items[*]}{@.metadata.name}:{range @.status.conditions[*]}{@.type}={@.status};{end}{end}'
            until kubectl -n kube-system get pods -lk8s-app=kube-dns -o jsonpath="$JSONPATH" 2>&1 | grep -q "Ready=True"; do
              sleep 1
              echo "waiting for kube-dns to be available"
              kubectl get pods -n kube-system
            done
      - run: |
          if [ -z "${CIRCLE_TAG}" -a "${CIRCLE_BRANCH}" == "master" ]; then
            export SERVICE_IMAGE="weaveworks/launcher-service:$(docker/image-tag)"
          else
            export SERVICE_IMAGE=weaveworks/build-tmp-public:launcher-service-$(docker/image-tag)
          fi
      - steps: << parameters.command >>
      - run:
          name: Output state of the k8s cluster on failed test
          command: |
            kubectl get all --all-namespaces
            kubectl get events --all-namespaces --field-selector=type=Warning
            kubectl logs -n weave -l=launcher=dns
          when: on_fail
      - run:
          name: Export k8s cluster logs
          command: kind export logs cluster_logs
          when: on_fail
      - store_artifacts:
          path: ./cluster_logs

  sentry:
    <<: *defaults
    steps:
      - checkout
      - run:
          name: Create sentry release
          command: |
            set -e
            CURRENT_COMMIT="$(git rev-parse HEAD)"
            PREV_COMMIT="$(git rev-parse HEAD^)"
            VERSION="$(git describe --always --long --dirty)"
            curl --retry 5 https://sentry.io/api/0/organizations/weaveworks/releases/ \
              --fail \
              -X POST \
              -H "Authorization: Bearer ${SENTRY_API_KEY}" \
              -H 'Content-Type: application/json' \
              -d '
              {
                "version": "'${VERSION}'",
                "refs": [{
                    "repository":"weaveworks/launcher",
                    "commit":"'${CURRENT_COMMIT}'",
                    "previousCommit":"'${PREV_COMMIT}'"
                }],
                "projects":["launcher-bootstrap","launcher-agent"]
            }
            '

workflows:
  build_deploy:
    jobs:
      - global_tests
      - agent:
          filters:
            tags:
              only: /[0-9]+(\.[0-9]+)*(-[a-z]+)?/
      - bootstrap
      - service:
          context:
            - ecr_upload

      - integration_testing:
          matrix:
            parameters:
              k8s_version: ['echo v1.11.1', 'echo v1.14.2', 'curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt']
              command:
                -
                  - run:
                      name: "install update flow"
                      command: ./integration-tests/tests/install-update-flow.sh
                -
                  - run: |
                      ./integration-tests/tests/e2e.sh
                      go test -v ./integration-tests/e2e -args -log.verbose
                -
                  - run: ./integration-tests/tests/kube-system-migration.sh
                -
                  - run: ./integration-tests/tests/flux-config.sh
                -
                  - run: |
                      # TODO setup
                      ./integration-tests/tests/gke.sh
          requires:
            - agent
            - bootstrap
            - service

      - sentry:
          filters:
            branches:
              only: master

  healthchecks:
    triggers:
      - schedule:
          cron: "0 * * * *"
          filters:
            branches:
              only:
                - master
    jobs:
      - integration_testing:
          matrix:
            parameters:
              k8s_version: ['echo v1.9.4', 'echo v1.14.2', 'curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt']
              command:
                -
                  - run: WEAVE_CLOUD_TOKEN=$DEV_INSTANCE_TOKEN ./integration-tests/tests/healthcheck.sh get.dev.weave.works
                -
                  - run: WEAVE_CLOUD_TOKEN=$DEV_INSTANCE_TOKEN ./integration-tests/tests/healthcheck.sh get.weave.works

  # re-run $stable jobs once a day as a new
  # version of kubernetes might have been released
  stable_kubernetes_still_works:
    triggers:
      - schedule:
          cron: "0 0 * * *"
          filters:
            branches:
              only:
                - master
    jobs:
      - agent:
          filters:
            tags:
              only: /[0-9]+(\.[0-9]+)*(-[a-z]+)?/
      - bootstrap
      - service:
          context:
            - ecr_upload
      - integration_testing:
          matrix:
            parameters:
              k8s_version: ['curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt']
              command:
                -
                  - run: ./integration-tests/tests/install-update-flow.sh
                -
                  - run: |
                      ./integration-tests/tests/e2e.sh
                      go test -v ./integration-tests/e2e -args -log.verbose
                -
                  - run: ./integration-tests/tests/kube-system-migration.sh
                -
                  - run: ./integration-tests/tests/flux-config.sh
                -
                  - run: |
                      # TODO setup
                      ./integration-tests/tests/gke.sh
