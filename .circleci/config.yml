version: 2

notify:
  webhooks:
    # Zap to forward healthcheck failures to Slack
    - url: https://hooks.zapier.com/hooks/catch/2669140/zma7dg/
    - url: https://hooks.zapier.com/hooks/catch/2669140/ziw81i/

defaults: &defaults
  working_directory: /go/src/github.com/weaveworks/launcher
  docker:
    # 1.10.0 and dnsName: https://github.com/golang/go/issues/23995
    - image: circleci/golang:1.9

integration_test_defaults: &integration_test_defaults
  machine:
    image: ubuntu-1604:201903-01
  environment:
    CHANGE_MINIKUBE_NONE_USER: true
    KUBE_SERVER_VERSION: echo v1.9.4
    KUBECTL_VERSION: echo v1.9.4
    MINIKUBE_VERSION: echo v0.25.2

job_environment_v1_14_2: &job_environment_v1_14_2
  environment:
    CHANGE_MINIKUBE_NONE_USER: true
    KUBE_SERVER_VERSION: echo v1.14.2
    KUBECTL_VERSION: echo v1.14.2
    MINIKUBE_VERSION: echo latest

job_environment_vstable: &job_environment_vstable
  environment:
    CHANGE_MINIKUBE_NONE_USER: true
    KUBE_SERVER_VERSION: curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt
    KUBECTL_VERSION: curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt
    MINIKUBE_VERSION: echo latest

workflow_job_defaults: &workflow_job_defaults
  requires:
    - agent
    - bootstrap
    - service

jobs:
  global_tests:
    <<: *defaults
    steps:
      - checkout
      - run: make lint
      - run: make dep
      - run: go test ./pkg/...

  bootstrap:
    <<: *defaults
    steps:
      - checkout
      - setup_remote_docker
      - run: make dep
      - run: go test ./bootstrap
      - run: make bootstrap
      - deploy:
          name: Push binaries to S3
          command: |
            sudo apt-get update
            sudo apt-get -y -qq install awscli
            aws s3 cp build/bootstrap/ s3://weaveworks-launcher/bootstrap/${CIRCLE_SHA1}/ --recursive

  service:
    <<: *defaults
    steps:
      - checkout
      - setup_remote_docker
      - run: make dep
      - run: make service/static/agent.yaml
      - run: go test ./service
      - run: make service
      - deploy:
          name: Push image
          command: |
            sudo apt-get update -qq
            sudo apt-get -y -qq install python-pip
            sudo pip install awscli # The apt package doesn't support --no-include-email
            mkdir ~/.aws
            echo $AWS_ECR_CREDENTIALS | base64 -d > ~/.aws/credentials
            $(unset AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY && aws ecr get-login --no-include-email --region us-east-1)
            docker login -u "$DOCKER_REGISTRY_USER" -p "$DOCKER_REGISTRY_PASSWORD"
            if [ -z "${CIRCLE_TAG}" -a "${CIRCLE_BRANCH}" == "master" ]; then
              docker push "weaveworks/launcher-service:$(docker/image-tag)"
              docker push "weaveworks/launcher-service"
              docker tag "weaveworks/launcher-service:$(docker/image-tag)" "664268111851.dkr.ecr.us-east-1.amazonaws.com/launcher-service:$(docker/image-tag)"
              docker push "664268111851.dkr.ecr.us-east-1.amazonaws.com/launcher-service:$(docker/image-tag)"
            else
              docker tag "weaveworks/launcher-service:$(docker/image-tag)" "weaveworks/build-tmp-public:launcher-service-$(docker/image-tag)"
              docker push "weaveworks/build-tmp-public:launcher-service-$(docker/image-tag)"
            fi

  agent:
    <<: *defaults
    steps:
      - checkout
      - setup_remote_docker
      - run: make dep
      - run: go test ./agent
      - run: make agent
      - deploy:
          name: Push image
          command: |
            docker login -u "$DOCKER_REGISTRY_USER" -p "$DOCKER_REGISTRY_PASSWORD"
            if [ -z "${CIRCLE_TAG}" -a "${CIRCLE_BRANCH}" == "master" ]; then
              docker push "weaveworks/launcher-agent:$(docker/image-tag)"
              docker push "weaveworks/launcher-agent"
            elif echo "${CIRCLE_TAG}" | grep -Eq "^[0-9]+(\.[0-9]+)*(-[a-z]+)?$"; then
              docker push "weaveworks/launcher-agent:${CIRCLE_TAG}"
            else
              docker tag "weaveworks/launcher-agent:$(docker/image-tag)" "weaveworks/build-tmp-public:launcher-agent-$(docker/image-tag)"
              docker push "weaveworks/build-tmp-public:launcher-agent-$(docker/image-tag)"
            fi

  integration_install_update_flow: &integration_install_update_flow
    <<: *integration_test_defaults
    steps:
      - checkout
      - &integration_deps
        run:
          name: Install integration test dependencies
          command: |
            # Install kubectl
            curl --retry 5 -Lo kubectl "https://storage.googleapis.com/kubernetes-release/release/$($KUBECTL_VERSION)/bin/linux/amd64/kubectl" && chmod +x kubectl && sudo mv kubectl /usr/local/bin/
            # Install minikube
            curl --retry 5 -Lo minikube "https://storage.googleapis.com/minikube/releases/$($MINIKUBE_VERSION)/minikube-linux-amd64" && chmod +x minikube && sudo mv minikube /usr/local/bin/
            # Install yq
            curl --retry 5 -Lo yq https://github.com/mikefarah/yq/releases/download/1.14.0/yq_linux_amd64 && chmod +x yq && sudo mv yq /usr/local/bin/
      - &start_minikube
        run:
          name: Start minikube
          command: |
            sudo minikube start --vm-driver=none --kubernetes-version "$($KUBE_SERVER_VERSION)"
            sudo chown -R $USER.$USER ~/.minikube
            sudo chown -R $USER.$USER ~/.kube
            minikube update-context
      - &wait_for_k8s
        run:
          name: Wait for Kubernetes cluster components to be ready
          command: |
            # Wait for nodes to become ready
            JSONPATH='{range .items[*]}{@.metadata.name}:{range @.status.conditions[*]}{@.type}={@.status};{end}{end}'; until kubectl get nodes -o jsonpath="$JSONPATH" 2>&1 | grep -q "Ready=True"; do sleep 1; done
            # Wait for DNS to be ready
            JSONPATH='{range .items[*]}{@.metadata.name}:{range @.status.conditions[*]}{@.type}={@.status};{end}{end}'; until kubectl -n kube-system get pods -lk8s-app=kube-dns -o jsonpath="$JSONPATH" 2>&1 | grep -q "Ready=True"; do sleep 1;echo "waiting for kube-dns to be available"; kubectl get pods -n kube-system; done
      - run:
          name: Execute integration tests
          no_output_timeout: 2m
          command: |
            if [ -z "${CIRCLE_TAG}" -a "${CIRCLE_BRANCH}" == "master" ]; then
              export SERVICE_IMAGE="weaveworks/launcher-service:$(docker/image-tag)"
            else
              export SERVICE_IMAGE=weaveworks/build-tmp-public:launcher-service-$(docker/image-tag)
            fi
            ./integration-tests/tests/install-update-flow.sh
      - &failed_test
        run:
          name: Output state of the k8s cluster on failed test
          command: |
            kubectl get all --all-namespaces
            kubectl get events --all-namespaces --field-selector=type=Warning
            kubectl logs -n weave -l=launcher=dns
          when: on_fail

  integration_cloudwatch: &integration_cloudwatch
    <<: *integration_test_defaults
    working_directory: ~/.go_workspace/src/github.com/weaveworks/launcher
    steps:
      - checkout
      - run: make dep
      - <<: *integration_deps
      - <<: *start_minikube
      - <<: *wait_for_k8s
      - run:
          name: Execute integration tests
          no_output_timeout: 10m
          environment:
            GOPATH: /home/circleci/.go_workspace
          command: |
            if [ -z "${CIRCLE_TAG}" -a "${CIRCLE_BRANCH}" == "master" ]; then
              export SERVICE_IMAGE="weaveworks/launcher-service:$(docker/image-tag)"
            else
              export SERVICE_IMAGE=weaveworks/build-tmp-public:launcher-service-$(docker/image-tag)
            fi
            ./integration-tests/tests/e2e.sh
            go test -v ./integration-tests/e2e -args -log.verbose
      - <<: *failed_test

  integration_kube_system_migration: &integration_kube_system_migration
    <<: *integration_test_defaults
    steps:
      - checkout
      - <<: *integration_deps
      - <<: *start_minikube
      - <<: *wait_for_k8s
      - run:
          name: Execute integration tests
          no_output_timeout: 2m
          command: |
            if [ -z "${CIRCLE_TAG}" -a "${CIRCLE_BRANCH}" == "master" ]; then
              export SERVICE_IMAGE="weaveworks/launcher-service:$(docker/image-tag)"
            else
              export SERVICE_IMAGE=weaveworks/build-tmp-public:launcher-service-$(docker/image-tag)
            fi
            ./integration-tests/tests/kube-system-migration.sh
      - <<: *failed_test

  integration_flux_config: &integration_flux_config
    <<: *integration_test_defaults
    steps:
      - checkout
      - <<: *integration_deps
      - <<: *start_minikube
      - <<: *wait_for_k8s
      - run:
          name: Execute integration tests
          no_output_timeout: 2m
          command: |
            if [ -z "${CIRCLE_TAG}" -a "${CIRCLE_BRANCH}" == "master" ]; then
              export SERVICE_IMAGE="weaveworks/launcher-service:$(docker/image-tag)"
            else
              export SERVICE_IMAGE=weaveworks/build-tmp-public:launcher-service-$(docker/image-tag)
            fi
            ./integration-tests/tests/flux-config.sh
      - <<: *failed_test

  integration_gke: &integration_gke
    <<: *integration_test_defaults
    steps:
      - checkout
      - <<: *integration_deps
      - run:
          name: Configure gcloud with launcher-integration-tests project
          command: |
            echo $GCLOUD_SERVICE_KEY | base64 --decode --ignore-garbage > ${HOME}/gcloud-service-key.json
            sudo /opt/google-cloud-sdk/bin/gcloud --quiet components update
            sudo /opt/google-cloud-sdk/bin/gcloud auth activate-service-account --key-file ${HOME}/gcloud-service-key.json
            sudo /opt/google-cloud-sdk/bin/gcloud config set project $GCLOUD_PROJECT
      - <<: *start_minikube
      - <<: *wait_for_k8s
      - run:
          name: Execute integration tests
          no_output_timeout: 2m
          command: |
            if [ -z "${CIRCLE_TAG}" -a "${CIRCLE_BRANCH}" == "master" ]; then
              export SERVICE_IMAGE="weaveworks/launcher-service:$(docker/image-tag)"
            else
              export SERVICE_IMAGE=weaveworks/build-tmp-public:launcher-service-$(docker/image-tag)
            fi
            ./integration-tests/tests/gke.sh
      - <<: *failed_test

  healthcheck_dev: &healthcheck_dev
    <<: *integration_test_defaults
    steps:
      - checkout
      - <<: *integration_deps
      - <<: *start_minikube
      - <<: *wait_for_k8s
      - run:
          name: Execute healthcheck for get.dev.weave.works
          command: WEAVE_CLOUD_TOKEN=$DEV_INSTANCE_TOKEN ./integration-tests/tests/healthcheck.sh get.dev.weave.works
      - <<: *failed_test

  healthcheck_prod: &healthcheck_prod
    <<: *integration_test_defaults
    steps:
      - checkout
      - <<: *integration_deps
      - <<: *start_minikube
      - <<: *wait_for_k8s
      - run:
          name: Execute healthcheck for get.weave.works
          command: WEAVE_CLOUD_TOKEN=$PROD_INSTANCE_TOKEN ./integration-tests/tests/healthcheck.sh get.weave.works
      - <<: *failed_test
      - run:
          name: Increment failure count metric
          command: |
            echo -e '# TYPE launcher_e2e_test_failures_total counter\nlauncher_e2e_test_failures_total 1\n' | curl -H 'Content-Type: text/plain; version=0.0.4' --data-binary @- https://cloud.weave.works/api/ui/metrics
          when: on_fail

  # v1.14.2 jobs

  integration_kube_system_migration_v1_14_2:
    <<: *integration_kube_system_migration
    <<: *job_environment_v1_14_2

  integration_install_update_flow_v1_14_2:
    <<: *integration_install_update_flow
    <<: *job_environment_v1_14_2

  integration_cloudwatch_v1_14_2:
    <<: *integration_cloudwatch
    <<: *job_environment_v1_14_2

  integration_flux_config_v1_14_2:
    <<: *integration_flux_config
    <<: *job_environment_v1_14_2

  integration_gke_v1_14_2:
    <<: *integration_gke
    <<: *job_environment_v1_14_2

  healthcheck_dev_v1_14_2:
    <<: *healthcheck_dev
    <<: *job_environment_v1_14_2

  healthcheck_prod_v1_14_2:
    <<: *healthcheck_prod
    <<: *job_environment_v1_14_2

  # vstable jobs

  integration_kube_system_migration_vstable:
    <<: *integration_kube_system_migration
    <<: *job_environment_vstable

  integration_install_update_flow_vstable:
    <<: *integration_install_update_flow
    <<: *job_environment_vstable

  integration_cloudwatch_vstable:
    <<: *integration_cloudwatch
    <<: *job_environment_vstable

  integration_flux_config_vstable:
    <<: *integration_flux_config
    <<: *job_environment_vstable

  integration_gke_vstable:
    <<: *integration_gke
    <<: *job_environment_vstable

  healthcheck_dev_vstable:
    <<: *healthcheck_dev
    <<: *job_environment_vstable

  healthcheck_prod_vstable:
    <<: *healthcheck_prod
    <<: *job_environment_vstable

  sentry:
    <<: *defaults
    steps:
      - checkout
      - run:
          name: Create sentry release
          command: |
            set -e
            CURRENT_COMMIT="$(git rev-parse HEAD)"
            PREV_COMMIT="$(git rev-parse HEAD^)"
            VERSION="$(git describe --always --long --dirty)"
            curl --retry 5 https://sentry.io/api/0/organizations/weaveworks/releases/ \
              --fail \
              -X POST \
              -H "Authorization: Bearer ${SENTRY_API_KEY}" \
              -H 'Content-Type: application/json' \
              -d '
              {
                "version": "'${VERSION}'",
                "refs": [{
                    "repository":"weaveworks/launcher",
                    "commit":"'${CURRENT_COMMIT}'",
                    "previousCommit":"'${PREV_COMMIT}'"
                }],
                "projects":["launcher-bootstrap","launcher-agent"]
            }
            '

workflows:
  version: 2
  build_deploy:
    jobs:
      - global_tests
      - agent:
          filters:
            tags:
              only: /[0-9]+(\.[0-9]+)*(-[a-z]+)?/
      - bootstrap
      - service

      # v1.9.4 jobs
      - integration_install_update_flow:
          <<: *workflow_job_defaults
      - integration_cloudwatch:
          <<: *workflow_job_defaults
      - integration_kube_system_migration:
          <<: *workflow_job_defaults
      - integration_flux_config:
          <<: *workflow_job_defaults
      - integration_gke:
          <<: *workflow_job_defaults

      # v1.14.2 jobs
      - integration_install_update_flow_v1_14_2:
          <<: *workflow_job_defaults
      - integration_cloudwatch_v1_14_2:
          <<: *workflow_job_defaults
      - integration_kube_system_migration_v1_14_2:
          <<: *workflow_job_defaults
      - integration_flux_config_v1_14_2:
          <<: *workflow_job_defaults
      - integration_gke_v1_14_2:
          <<: *workflow_job_defaults

      # vstable jobs
      - integration_install_update_flow_vstable:
          <<: *workflow_job_defaults
      - integration_cloudwatch_vstable:
          <<: *workflow_job_defaults
      - integration_kube_system_migration_vstable:
          <<: *workflow_job_defaults
      - integration_flux_config_vstable:
          <<: *workflow_job_defaults
      - integration_gke_vstable:
          <<: *workflow_job_defaults

      - sentry:
          filters:
            branches:
              only: master

  healthchecks:
    triggers:
      - schedule:
          cron: "0 * * * *"
          filters:
            branches:
              only:
                - master
    jobs:
      - healthcheck_dev
      - healthcheck_prod
      - healthcheck_dev_v1_14_2
      - healthcheck_prod_v1_14_2
      - healthcheck_dev_vstable
      - healthcheck_prod_vstable

  # re-run $stable jobs once a day as a new
  # version of kubernetes might have been released
  stable_kubernetes_still_works:
    triggers:
      - schedule:
          cron: "0 0 * * *"
          filters:
            branches:
              only:
                - master
    jobs:
      - integration_install_update_flow_vstable:
          <<: *workflow_job_defaults
      - integration_cloudwatch_vstable:
          <<: *workflow_job_defaults
      - integration_kube_system_migration_vstable:
          <<: *workflow_job_defaults
      - integration_flux_config_vstable:
          <<: *workflow_job_defaults
      - integration_gke_vstable:
          <<: *workflow_job_defaults