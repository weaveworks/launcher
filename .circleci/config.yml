version: 2

notify:
  webhooks:
    # Zap to forward healthcheck failures to Slack
    - url: https://hooks.zapier.com/hooks/catch/2669140/zma7dg/
    - url: https://hooks.zapier.com/hooks/catch/2669140/ziw81i/

defaults: &defaults
  working_directory: /go/src/github.com/weaveworks/launcher
  docker:
    # 1.10.0 and dnsName: https://github.com/golang/go/issues/23995
    - image: circleci/golang:1.9

jobs:
  global_tests:
    <<: *defaults
    steps:
      - checkout
      - run: make lint
      - run: make dep
      - run: go test ./pkg/...

  bootstrap:
    <<: *defaults
    steps:
      - checkout
      - setup_remote_docker
      - run: make dep
      - run: go test ./bootstrap
      - run: make bootstrap
      - deploy:
          name: Push binaries to S3
          command: |
            sudo apt-get -y -qq install awscli
            aws s3 cp build/bootstrap/ s3://weaveworks-launcher/bootstrap/${CIRCLE_SHA1}/ --recursive

  service:
    <<: *defaults
    steps:
      - checkout
      - setup_remote_docker
      - run: make dep
      - run: go test ./service
      - run: make service
      - deploy:
          name: Push image
          command: |
            docker login -u "$DOCKER_REGISTRY_USER" -p "$DOCKER_REGISTRY_PASSWORD" quay.io
            if [ -z "${CIRCLE_TAG}" -a "${CIRCLE_BRANCH}" == "master" ]; then
              docker push "quay.io/weaveworks/launcher-service:$(docker/image-tag)"
              docker push "quay.io/weaveworks/launcher-service"
            else
              docker tag "quay.io/weaveworks/launcher-service:$(docker/image-tag)" "quay.io/weaveworks/build-tmp-public:launcher-service-$(docker/image-tag)"
              docker push "quay.io/weaveworks/build-tmp-public:launcher-service-$(docker/image-tag)"
            fi

  agent:
    <<: *defaults
    steps:
      - checkout
      - setup_remote_docker
      - run: make dep
      - run: go test ./agent
      - run: make agent
      - deploy:
          name: Push image
          command: |
            docker login -u "$DOCKER_REGISTRY_USER" -p "$DOCKER_REGISTRY_PASSWORD" quay.io
            if [ -z "${CIRCLE_TAG}" -a "${CIRCLE_BRANCH}" == "master" ]; then
              docker push "quay.io/weaveworks/launcher-agent:$(docker/image-tag)"
              docker push "quay.io/weaveworks/launcher-agent"
            elif echo "${CIRCLE_TAG}" | grep -Eq "^[0-9]+(\.[0-9]+)*(-[a-z]+)?$"; then
              docker push "quay.io/weaveworks/launcher-agent:${CIRCLE_TAG}"
            else
              docker tag "quay.io/weaveworks/launcher-agent:$(docker/image-tag)" "quay.io/weaveworks/build-tmp-public:launcher-agent-$(docker/image-tag)"
              docker push "quay.io/weaveworks/build-tmp-public:launcher-agent-$(docker/image-tag)"
            fi

  integration_install_update_flow:
    machine: true
    environment:
      CHANGE_MINIKUBE_NONE_USER: true
    steps:
      - checkout
      - &integration_deps
        run:
          name: Install integration test dependencies
          command: |
            # Install kubectl
            curl --retry 5 -Lo kubectl https://storage.googleapis.com/kubernetes-release/release/v1.8.4/bin/linux/amd64/kubectl && chmod +x kubectl && sudo mv kubectl /usr/local/bin/
            # Install minikube
            curl --retry 5 -Lo minikube https://storage.googleapis.com/minikube/releases/v0.25.0/minikube-linux-amd64 && chmod +x minikube && sudo mv minikube /usr/local/bin/
            # Install yq
            curl --retry 5 -Lo yq https://github.com/mikefarah/yq/releases/download/1.14.0/yq_linux_amd64 && chmod +x yq && sudo mv yq /usr/local/bin/
      - &start_minikube
        run:
          name: Start minikube
          command: |
            sudo minikube start --vm-driver=none
            sudo chown -R $USER.$USER ~/.minikube
            sudo chown -R $USER.$USER ~/.kube
            minikube update-context
      - &wait_for_minikube
        run:
          name: Wait for nodes to become ready
          command: JSONPATH='{range .items[*]}{@.metadata.name}:{range @.status.conditions[*]}{@.type}={@.status};{end}{end}'; until kubectl get nodes -o jsonpath="$JSONPATH" 2>&1 | grep -q "Ready=True"; do sleep 1; done
      - run:
          name: Execute integration tests
          command: |
            if [ -z "${CIRCLE_TAG}" -a "${CIRCLE_BRANCH}" == "master" ]; then
              export SERVICE_IMAGE="quay.io/weaveworks/launcher-service:$(docker/image-tag)"
            else
              export SERVICE_IMAGE=quay.io/weaveworks/build-tmp-public:launcher-service-$(docker/image-tag)
            fi
            ./integration-tests/tests/install-update-flow.sh

  integration_kube_system_migration:
    machine: true
    environment:
      CHANGE_MINIKUBE_NONE_USER: true
    steps:
      - checkout
      - <<: *integration_deps
      - <<: *start_minikube
      - <<: *wait_for_minikube
      - run:
          name: Execute integration tests
          command: |
            if [ -z "${CIRCLE_TAG}" -a "${CIRCLE_BRANCH}" == "master" ]; then
              export SERVICE_IMAGE="quay.io/weaveworks/launcher-service:$(docker/image-tag)"
            else
              export SERVICE_IMAGE=quay.io/weaveworks/build-tmp-public:launcher-service-$(docker/image-tag)
            fi
            ./integration-tests/tests/kube-system-migration.sh

  integration_flux_config:
    machine: true
    environment:
      CHANGE_MINIKUBE_NONE_USER: true
    steps:
      - checkout
      - <<: *integration_deps
      - <<: *start_minikube
      - <<: *wait_for_minikube
      - run:
          name: Execute integration tests
          command: |
            if [ -z "${CIRCLE_TAG}" -a "${CIRCLE_BRANCH}" == "master" ]; then
              export SERVICE_IMAGE="quay.io/weaveworks/launcher-service:$(docker/image-tag)"
            else
              export SERVICE_IMAGE=quay.io/weaveworks/build-tmp-public:launcher-service-$(docker/image-tag)
            fi
            ./integration-tests/tests/flux-config.sh

  integration_gke:
    machine: true
    environment:
      CHANGE_MINIKUBE_NONE_USER: true
    steps:
      - checkout
      - <<: *integration_deps
      - run:
          name: Configure gcloud with launcher-integration-tests project
          command: |
            echo $GCLOUD_SERVICE_KEY | base64 --decode --ignore-garbage > ${HOME}/gcloud-service-key.json
            sudo /opt/google-cloud-sdk/bin/gcloud --quiet components update
            sudo /opt/google-cloud-sdk/bin/gcloud auth activate-service-account --key-file ${HOME}/gcloud-service-key.json
            sudo /opt/google-cloud-sdk/bin/gcloud config set project $GCLOUD_PROJECT
      - <<: *start_minikube
      - <<: *wait_for_minikube
      - run:
          name: Execute integration tests
          command: |
            if [ -z "${CIRCLE_TAG}" -a "${CIRCLE_BRANCH}" == "master" ]; then
              export SERVICE_IMAGE="quay.io/weaveworks/launcher-service:$(docker/image-tag)"
            else
              export SERVICE_IMAGE=quay.io/weaveworks/build-tmp-public:launcher-service-$(docker/image-tag)
            fi
            ./integration-tests/tests/gke.sh

  healthcheck_dev:
    machine: true
    environment:
      CHANGE_MINIKUBE_NONE_USER: true
    steps:
      - checkout
      - <<: *integration_deps
      - <<: *start_minikube
      - <<: *wait_for_minikube
      - run:
          name: Execute healthcheck for get.dev.weave.works
          command: WEAVE_CLOUD_TOKEN=$DEV_INSTANCE_TOKEN ./integration-tests/tests/healthcheck.sh get.dev.weave.works

  healthcheck_prod:
    machine: true
    environment:
      CHANGE_MINIKUBE_NONE_USER: true
    steps:
      - checkout
      - <<: *integration_deps
      - <<: *start_minikube
      - <<: *wait_for_minikube
      - run:
          name: Execute healthcheck for get.weave.works
          command: WEAVE_CLOUD_TOKEN=$PROD_INSTANCE_TOKEN ./integration-tests/tests/healthcheck.sh get.weave.works

  sentry:
    <<: *defaults
    steps:
      - checkout
      - run:
          name: Create sentry release
          command: |
            set -e
            CURRENT_COMMIT="$(git rev-parse HEAD)"
            PREV_COMMIT="$(git rev-parse HEAD^)"
            VERSION="$(git describe --always --long --dirty)"
            curl --retry 5 https://sentry.io/api/0/organizations/weaveworks/releases/ \
              --fail \
              -X POST \
              -H "Authorization: Bearer ${SENTRY_API_KEY}" \
              -H 'Content-Type: application/json' \
              -d '
              {
                "version": "'${VERSION}'",
                "refs": [{
                    "repository":"weaveworks/launcher",
                    "commit":"'${CURRENT_COMMIT}'",
                    "previousCommit":"'${PREV_COMMIT}'"
                }],
                "projects":["launcher-bootstrap","launcher-agent"]
            }
            '

workflows:
  version: 2
  build_deploy:
    jobs:
      - global_tests
      - agent:
          filters:
            tags:
              only: /[0-9]+(\.[0-9]+)*(-[a-z]+)?/
      - bootstrap
      - service
      - integration_install_update_flow:
          requires:
            - agent
            - bootstrap
            - service
      - integration_kube_system_migration:
          requires:
            - agent
            - bootstrap
            - service
      - integration_flux_config:
          requires:
            - agent
            - bootstrap
            - service
      - integration_gke:
          requires:
            - agent
            - bootstrap
            - service
      - sentry:
          filters:
            branches:
              only: master

  healthchecks:
    triggers:
      - schedule:
          cron: "0 * * * *"
          filters:
            branches:
              only:
                - master
    jobs:
      - healthcheck_dev
      - healthcheck_prod
