version: 2

defaults: &defaults
  working_directory: /go/src/github.com/weaveworks/launcher
  docker:
    - image: circleci/golang:latest

jobs:
  lint:
    <<: *defaults
    steps:
      - checkout
      - run: make lint

  bootstrap:
    <<: *defaults
    steps:
      - checkout
      - setup_remote_docker
      - run: make dep
      - run: go test ./bootstrap
      - run: make bootstrap
      - deploy:
          name: Push binaries to S3
          command: |
            sudo apt-get -y -qq install awscli
            aws s3 cp build/bootstrap/ s3://weaveworks-launcher/bootstrap/${CIRCLE_SHA1}/ --recursive

  service:
    <<: *defaults
    steps:
      - checkout
      - setup_remote_docker
      - run: make dep
      - run: go test ./service
      - run: make service
      - deploy:
          name: Push image
          command: |
            docker login -u "$DOCKER_REGISTRY_USER" -p "$DOCKER_REGISTRY_PASSWORD" quay.io
            if [ -z "${CIRCLE_TAG}" -a "${CIRCLE_BRANCH}" == "master" ]; then
              docker push "quay.io/weaveworks/launcher-service:$(docker/image-tag)"
              docker push "quay.io/weaveworks/launcher-service"
            else
              docker tag "quay.io/weaveworks/launcher-service:$(docker/image-tag)" "quay.io/weaveworks/build-tmp:launcher-service-$(docker/image-tag)"
              docker push "quay.io/weaveworks/build-tmp:launcher-service-$(docker/image-tag)"
            fi

  agent:
    <<: *defaults
    steps:
      - checkout
      - setup_remote_docker
      - run: make dep
      - run: go test ./agent
      - run: make agent
      - deploy:
          name: Push image
          command: |
            docker login -u "$DOCKER_REGISTRY_USER" -p "$DOCKER_REGISTRY_PASSWORD" quay.io
            if [ -z "${CIRCLE_TAG}" -a "${CIRCLE_BRANCH}" == "master" ]; then
              docker push "quay.io/weaveworks/launcher-agent:$(docker/image-tag)"
              docker push "quay.io/weaveworks/launcher-agent"
            else
              docker tag "quay.io/weaveworks/launcher-agent:$(docker/image-tag)" "quay.io/weaveworks/build-tmp:launcher-agent-$(docker/image-tag)"
              docker push "quay.io/weaveworks/build-tmp:launcher-agent-$(docker/image-tag)"
            fi

  integration:
    machine: true
    environment:
      CHANGE_MINIKUBE_NONE_USER: true
    steps:
      - checkout
      - run:
          name: Install kubectl
          command: curl -Lo kubectl https://storage.googleapis.com/kubernetes-release/release/v1.8.4/bin/linux/amd64/kubectl && chmod +x kubectl && sudo mv kubectl /usr/local/bin/
      - run:
          name: Install minikube
          command: curl -Lo minikube https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64 && chmod +x minikube && sudo mv minikube /usr/local/bin/
      - run:
          name: Start minikube
          command: sudo minikube start --vm-driver=none
      - run: sudo chown -R $USER.$USER ~/.minikube
      - run: sudo chown -R $USER.$USER ~/.kube
      - run:
          name: Set context for kubectl
          command: minikube update-context
      - run:
          name: Wait for nodes to become ready
          command: JSONPATH='{range .items[*]}{@.metadata.name}:{range @.status.conditions[*]}{@.type}={@.status};{end}{end}'; until kubectl get nodes -o jsonpath="$JSONPATH" 2>&1 | grep -q "Ready=True"; do sleep 1; done
      - run:
          name: Get cluster information
          command: kubectl cluster-info
      - run:
          name: Create docker-registry quay.io secret
          command: kubectl create secret docker-registry regsecret --docker-server=quay.io --docker-username=$DOCKER_REGISTRY_USER  --docker-password=$DOCKER_REGISTRY_PASSWORD --docker-email=$(DOCKER_REGISTRY_USER)@weave.works
      - run:
          name: Start launcher/service on minikube
          command: |
            sed -e "s#@@IMAGE_TAG@@#launcher-service-$(docker/image-tag)#g" -e "s#@@HOSTNAME@@#$(minikube ip)#g" ./integration-tests/k8s/service.yaml.in > ./integration-tests/k8s/service.yaml
            kubectl apply -f ./integration-tests/k8s/service.yaml
      - run:
          name: Wait for launcher/service pod to become ready
          command: JSONPATH='{range .items[*]}{@.metadata.name}:{range @.status.conditions[*]}{@.type}={@.status};{end}{end}'; until kubectl get pods -l name=service -o jsonpath="$JSONPATH" 2>&1 | grep -q "Ready=True"; do sleep 1; done
      - run:
          name: Wait for launcher/service to be fully reachable
          command: until curl $(minikube service service --url); do sleep 1; done

workflows:
  version: 2
  build_deploy:
    jobs:
      - lint
      - agent
      - bootstrap
      - service
      - integration:
          requires:
            - agent
            - bootstrap
            - service
